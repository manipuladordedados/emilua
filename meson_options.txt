option(
    'enable_manpages', type : 'boolean', value : true,
    description : 'Whether to build manpages (will need asciidoctor).'
)
option(
    'disable_color', type : 'boolean', value : false,
    description : 'Whether to disable builtin color support on terminal' +
        ' output. The builtin color support will auto-detect if stdout/stderr' +
        ' is a color capable terminal, but still allow you to override' +
        ' auto-detection through env vars. Builtin color support is used to' +
        ' print error messages, for instance.'
)
option(
    'thread_support_level', type : 'integer', min : 0, max : 2, value : 2,
    description : 'Check include/emilua/config.h.in for documentation',
)
option(
    'enable_tests', type : 'boolean',
    description : 'Whether to build tests (will require more dependencies).'
)
option(
    'enable_http', type : 'boolean', value : false,
    description : 'Whether to build the HTTP module.'
)
option(
    'enable_websocket_permessage_deflate', type : 'boolean', value : true,
    description : 'Whether to enable builtin support for the RFC7692' +
        ' permessage-deflate extension.'
)
option(
    'version_suffix', type : 'string', value : '',
    description : 'A suffix string to append to version string'
)
option(
    'enable_plugins', type : 'boolean', value : true,
    description : 'Whether to enable module loading from native plugins'
)
option(
    'enable_io_uring', type : 'boolean', value : false
)
option(
    'enable_file_io', type : 'boolean', value : false,
    description : 'Only available for proactor backends ' +
        '(e.g. Windows/IOCP, Linux/io_uring)'
)
option(
    'use_wolfssl', type : 'boolean', value : false,
    description : 'Use wolfSSL as the openssl provider'
)
option(
    'enable_linux_namespaces', type : 'boolean', value : false,
    description : 'Whether to enable the Linux namespace powered actor API'
)

# Do mind that smaller limits may apply. For instance SCM_MAX_FD (usually 253)
# will limit you from sending more than SCM_MAX_FD file descriptors per message.
option(
    'linux_namespaces_msg_max_members_number', type : 'integer', value : 20,
    description : 'Maximum number of fields that may be sent in a single message'
)

# For the default value, we multiply 20 by 520 and arrive at 10400. 520 is the
# maximum size occupied by each member.
# 520 = 8 bytes for the floating point NaN-tagging field + 512.
# 512 = 256 for the maximum key string + 256 for the maximum value.
# 256 = 1 byte for size member + maximum 255 bytes following.
# 255 = the maximum value of an uint8 field (the size parameter preceding).
#
# Do keep /proc/sys/net/core/wmem_max in mind (cf.
# <https://stackoverflow.com/a/8227480/883113>).
#
# Linux distro maintainers may disagree about the default value here. The above
# explanation should hint packagers on how to determine a new size.
#
# Do keep in mind that you don't really need to support really huge
# messages. The user can just send a pipe over and read bigger messages out of
# the pipe. The important limit is to get related resources in a single message
# at once.
option(
    'linux_namespaces_msg_size', type : 'integer', value : 10400,
    description : 'Message size to VMs in namespaces'
)
